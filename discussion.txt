1. The following are the results for the design without cache for each 
    benchmark with the calculated IPC:

Benchmark median
Cycles = 60700
Insts  = 4015
IPC = 0.066

Benchmark multiply
Cycles = 247598
Insts  = 20893
IPC = 0.084

Benchmark qsort
Cycles = 1745636
Insts  = 123928
IPC = 0.071

Benchmark tower
Cycles = 76567
Insts  = 6096
IPC = 0.080

Benchmark vvadd
Cycles = 27720
Insts  = 2408
IPC = 0.087

2. The following are the results for the design with cache for each 
    benchmark with the calculated IPC:

Benchmark median
Cycles = 15343
Insts  = 4015
IPC = 0.262

Benchmark multiply
Cycles = 34164
Insts  = 20893
IPC = 0.612

Benchmark qsort
Cycles = 415833
Insts  = 123928
IPC = 0.298

Benchmark tower
Cycles = 22788
Insts  = 6096
IPC = 0.268

Benchmark vvadd
Cycles = 5176
Insts  = 2408
IPC = 0.465

Notice that the cache increases performance by almost an order of magnitude.

(Exercise 4 - FPGA Results)
    
    ---- /mit/6.175/fpga-programs/assembly/addi.riscv.vmh ----
    668
    201
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/add.riscv.vmh ----
    1280
    424
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/andi.riscv.vmh ----
    554
    157
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/and.riscv.vmh ----
    1531
    444
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/auipc.riscv.vmh ----
    88
    17
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/beq.riscv.vmh ----
    795
    250
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bge.riscv.vmh ----
    877
    268
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bgeu.riscv.vmh ----
    1017
    293
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/blt.riscv.vmh ----
    800
    250
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bltu.riscv.vmh ----
    915
    276
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bne.riscv.vmh ----
    812
    250
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bpred_bht.riscv.vmh ----
    2496
    1007
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bpred_j_noloop.riscv.vmh ----
    192
    34
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bpred_j.riscv.vmh ----
    2202
    1803
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/bpred_ras.riscv.vmh ----
    852
    283
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/cache.riscv.vmh ----
    254
    41
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/jal.riscv.vmh ----
    79
    14
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/jalr.riscv.vmh ----
    254
    64
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/j.riscv.vmh ----
    70
    10
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/lui.riscv.vmh ----
    92
    24
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/lw.riscv.vmh ----
    830
    226
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/ori.riscv.vmh ----
    586
    164
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/or.riscv.vmh ----
    1535
    447
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/simple.riscv.vmh ----
    273
    100
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/slli.riscv.vmh ----
    673
    200
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/sll.riscv.vmh ----
    1386
    462
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/slti.riscv.vmh ----
    657
    197
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/slt.riscv.vmh ----
    1263
    418
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/srai.riscv.vmh ----
    751
    215
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/sra.riscv.vmh ----
    1450
    471
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/srli.riscv.vmh ----
    751
    213
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/srl.riscv.vmh ----
    1511
    479
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/sub.riscv.vmh ----
    1254
    416
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/sw.riscv.vmh ----
    1493
    449
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/xori.riscv.vmh ----
    589
    166
    PASSED

    ---- /mit/6.175/fpga-programs/assembly/xor.riscv.vmh ----
    1522
    446
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/mandelbrot.riscv.vmh ----
    Benchmark mandelbrot
    111111111111111111111111111111111111111111111111111111111111
    111111111111111111111111111111111111111111111111111111111111
    111111111111111111111111111111111111111111111111111111111111
    111111111111111111111111111111111111000011111111111111111111
    111111111111111111111111111111111111000011111111111111111111
    111111111111111111111111111111111111100111111111111111111111
    111111111111111111111111111110010000000000011111111111111111
    111111111111111111111111111111000000000000000001111111111111
    111111111111111111111111111110000000000000000011111111111111
    111111111111111111111111111100000000000000000001111111111111
    111111111111111111111111111000000000000000000000111111111111
    111111111111111110110111110000000000000000000000111111111111
    111111111111111110000000110000000000000000000000111111111111
    111111111111111100000000010000000000000000000000111111111111
    111111111111101100000000000000000000000000000001111111111111
    111110111111100000000000000000000000000000000011111111111111
    111111111111111000000000000000000000000000000001111111111111
    111111111111111100000000010000000000000000000000111111111111
    111111111111111110000000100000000000000000000000111111111111
    111111111111111111110111110000000000000000000000111111111111
    111111111111111111111111110000000000000000000000011111111111
    111111111111111111111111111100000000000000000001111111111111
    111111111111111111111111111110000000000000000011111111111111
    111111111111111111111111111110000000000000001001111111111111
    111111111111111111111111111110011000000000011111111111111111
    111111111111111111111111111111111111000111111111111111111111
    111111111111111111111111111111111111000011111111111111111111
    111111111111111111111111111111111111000011111111111111111111
    111111111111111111111111111111111111111111111111111111111111
    111111111111111111111111111111111111111111111111111111111111
    Cycles = 76426566
    Insts  = 47144112
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/median.riscv.vmh ----
    Benchmark median
    Cycles = 15001
    Insts  = 4015
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/multiply.riscv.vmh ----
    Benchmark multiply
    Cycles = 34141
    Insts  = 20893
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/qsort.riscv.vmh ----
    Benchmark qsort
    Cycles = 412646
    Insts  = 123928
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/towers.riscv.vmh ----
    Benchmark tower
    Cycles = 22109
    Insts  = 6096
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/benchmarks/vvadd.riscv.vmh ----
    Benchmark vvadd
    Cycles = 5121
    Insts  = 2408
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/large/median.riscv.vmh ----
    Benchmark median
    Cycles = 19813992
    Insts  = 3999920
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/large/multiply.riscv.vmh ----
    Benchmark multiply
    Cycles = 6827993
    Insts  = 4178594
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/large/qsort.riscv.vmh ----
    Benchmark qsort
    Cycles = 19328640
    Insts  = 5476016
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/large/towers.riscv.vmh ----
    Benchmark tower
    Cycles = 22615565
    Insts  = 6291408
    Return 0
    PASSED

    ---- /mit/6.175/fpga-programs/large/vvadd.riscv.vmh ----
    Benchmark vvadd
    Cycles = 31762859
    Insts  = 4800015
    Return 0
    PASSED


3. The mandlebrot benchmark executed 47144112 instructions in 76426566 cycles
    on the FPGA (an IPC of 0.617). At a clock speed of 50 MHz, this cycle count
    would should equate to 1.53 seconds of run time. To estimate the runtime
    in software simulation, I noticed that the Mandlebrot benchmark outputs 30
    lines one character at a time where the lines are fixed width. I make the
    assumption that each line computes in approximately the same time and then
    measured the wall clock time to complete two full lines of the mandlebrot
    benchmark in simulation. This took 6.5 minutes. Therefore
            Estimated time = 6.5 minutes * 30 / 2 = 97.5 minutes
    so I estimate the entire simulation would take one hour and 37.5 minutes.
    This would be a speedup of (97.5 * 60) / 1.53 = 3823.5.
